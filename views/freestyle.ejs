<style>

  :root {
    --knob-width: 50px;
    --section-border: 2px solid rgba(255, 255, 255, 0.3);
    --outer-shadow: 0rem 0rem 0.6rem 0rem rgba(0, 0, 0, 0.5), 
    0rem 0rem 0.6rem 0rem rgba(0, 0, 0, 0.5);
    --progress-bar: #444;
  }

  .container {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    flex-basis: 50%;
  }

  .progress-wrapper {
    position: absolute;
    top: 0.5rem;
    pointer-events: none;
  }

  .progress-overflow {
    position: relative;
    width: 6rem;
    height: 5rem;
    overflow: hidden;
  }

  .progress-bar {
    position: absolute;
    width: 6rem;
    height: 6rem;
    border-radius: 50%;
    border: 2px solid var(--progress-bar);
    border-bottom-color: red;
  }

  .knob {
    width: var(--knob-width);
    height: var(--knob-width);
    background: black;
    /*border-top: var(--section-border);*/
    border-radius: 100px;
    margin: 1rem;
    cursor: pointer;
    box-shadow: var(--outer-shadow);
    transform: rotate(-135deg);
  }

  .knob::after {
    content: '';
    display: flex;
    width: 0.2rem;
    height: 1rem;
    background-color: white;
    border: 1px solid rgba(0,0,0,0.3);
    border-radius: 50%;
    margin: 0.2rem auto;
    margin-top: -0.3rem;
  }
</style>

<div class="container">
  <div class="progress-wrapper">
    <div class="progress-overflow">
      <div class="progress-bar" style="transform: rotate(0deg)"></div>
    </div>
  </div>
  <div class="knob"></div>
  <div class="display">0</div><span>%</span>
</div>

<script>
  Number.prototype.mod = function(n) {
    return ((this % n) + n) % n;
  }

  let knob = {
    element: null,
    active: false,
    degrees: -135,
    value: 0
  };

  knob.element = document.querySelector('.knob');
  knob.container = document.querySelector('.container');
  knob.display = document.querySelector('.display');
  knob.progress = document.querySelector('.progress-bar');

  knob.element.addEventListener('mousedown', handleMouseDown);

  function handleMouseDown(e) {
    e.preventDefault();
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    start(e);
  }

  function handleMouseUp() {
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
    stop();
  }

  function start(e) {
    knob.active = true;
    knob.startY = e.clientY;
    knob.startDegrees = knob.degrees;
  }

  function stop(e) {
    knob.active = false;
    //knob.element.style.transition = 'transform 0.2s'; // Add a transition for smooth rotation
  }

  function rotate(e) {
    const deltaY = knob.startY - e.clientY;
    
    // Calculate the number of degrees to move per pixel (adjust as needed)
    const degreesPerPixel = 1;

    knob.degrees = knob.startDegrees + deltaY * degreesPerPixel;

    // Limit the knob's rotation to -135 to 135 degrees
    knob.degrees = Math.max(-135, Math.min(135, knob.degrees));

    knob.element.style.transform = `rotate(${knob.degrees}deg)`;
    knob.progress.style.transform = `rotate(${knob.degrees + 135}deg)`;

    knob.value = degreesToValue(knob.degrees);

    updateKnobValue();
    updateProgressBar();
  }

  function handleMouseMove(e) {
    e.preventDefault();
    if (knob.active) rotate(e);
  }

  function updateKnobValue() {
    knob.display.textContent = knob.value;
  }

  function updateProgressBar() {
    let progress = parseInt(knob.progress.style.transform.replace('rotate(', '').replace(')', ''));
    let segments = 0;

    // Determine number of border segments
    if (progress <= 90) segments = 1;
    else if (progress >= 91 && progress <= 180) segments = 2;
    else if (progress >= 181) segments = 3;

    // Change border colour to indicate additional segments
    if (segments === 1) {
      knob.progress.style.borderRightColor = 'var(--progress-bar)';
      knob.progress.style.borderTopColor = 'var(--progress-bar)';
    } else if (segments === 2) {
      knob.progress.style.borderRightColor = 'red';
      knob.progress.style.borderTopColor = 'var(--progress-bar)';
    } else if (segments === 3) {
      knob.progress.style.borderRightColor = 'red';
      knob.progress.style.borderTopColor = 'red';
    }

  }

  function degreesToValue(degrees) {
    // Map the range of degrees (-135 to 135) to the range of values (0 to 100)
    const minDegrees = -135;
    const maxDegrees = 135;
    const minValue = 0;
    const maxValue = 255;

    // Calculate the value using linear mapping
    value = ((degrees - minDegrees) / (maxDegrees - minDegrees)) * (maxValue - minValue) + minValue;

    // Ensure the value is within the 0 to 100 range
    return Math.min(maxValue, Math.max(minValue, Math.round(value)));
  }
</script>




<!--
<script>
  const container = document.querySelector('.container');
  const knob = {
    element: null, 
    active: false, 
    degrees: -135, 
    minDegrees: -135, 
    maxDegrees: 135, 
    startAngle: 0, 
    boxCenter: {x: 0, y: 0},
    rotation: 0,
    angle: 0,
    startY: 0,
    value: 0
  };
  
  knob.element = document.querySelector('.knob');

  container.addEventListener('mousedown', handleMouseDown);

  function handleMouseDown(e) {
    e.preventDefault();

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    start(e);
  }

  function handleMouseMove(e) {
    e.preventDefault();
    if (knob.active === true) rotate(e)
  }

  function handleMouseUp(e) {
    e.preventDefault();
    stop(e);
  }

  function start(e) {
    // Calculate the initial vertical position within the knob container
    //knob.startY = e.clientY - knob.element.getBoundingClientRect().top;

    /*
    // Get bounding box
    let box = knob.element.getBoundingClientRect();

    // Get box center
    knob.boxCenter = {
      x: box.left + (box.width / 2),
      y: box.top + (box.height / 2)
    }

    // Get deltas
    let dx = e.clientX - knob.boxCenter.x,
        dy = e.clientY - knob.boxCenter.y;

    // Get starting angle
    knob.startAngle = Math.atan2(dy, dx) * (180 / Math.PI);
*/
    // Set active
    knob.active = true;
    
  }

  function stop(e) {
    //knob.angle += knob.rotation;
    knob.active = false;
  }

  function rotate(e) {

    if (!knob.active) return;

    // Calculate the vertical position within the knob container
    let newY = e.clientY - knob.element.getBoundingClientRect().top;

    // Calculate the change in Y position
    let deltaY = newY - knob.startY;

    // Calculate the knob value based on the change in Y position
    let knobValue = (deltaY / knob.element.clientHeight) * 270 - 135;

    // Ensure the knob value stays within the desired range
    knobValue = Math.max(-135, Math.min(135, knobValue));

    // Update the knob's rotation
    knob.element.style.transform = `rotate(${knobValue}deg)`;

    // Update the knob's value (you can use knobValue for other purposes)
    knob.value = knobValue;

    

    /*
    // Get deltas
    let dx = e.clientX - knob.boxCenter.x,
        dy = e.clientY - knob.boxCenter.y;
    
    // Get degrees
    let deg = Math.atan2(dy, dx) * (180 / Math.PI);
    
    // Get rotation amount
    knob.rotation = deg - knob.startAngle;

    // Get degree between 0 and 359
    knob.degrees = Math.floor((knob.angle + knob.rotation).mod(360));

    // Rotate knob element
    knob.element.style.transform = `rotate(${knob.degrees}deg)`;
*/





    /*
    const knobRect = knob.element.getBoundingClientRect();
    const centerY = knobRect.top + knobRect.height / 2;
    const deltaY = centerY - e.clientY;
    
    // Calculate the new knob valueDegrees based on deltaY
    const sensitivityFactor = 5; // Adjust this to control rotation speed
    knob.degrees += deltaY;
    
    // Ensure the knob valueDegrees stays within the allowable range
    knob.degrees = Math.max(knob.minDegrees, Math.min(knob.maxDegrees, knob.degrees));

    knob.element.style.transform = `rotate(${knob.degrees}deg)`;
    */
  }

  function progress() {

  }

  // Handle negative integer modulo operations
  Number.prototype.mod = function(n) {
    return ((this % n) + n) % n;
  }
</script>

-->






















<!--
<style>
  .wrapper {
    display: flex;
    justify-content: center;
  }
  canvas {
    background: white;
    border: 2px dotted black;
  }
</style>

<div class="wrapper">
  <canvas id="canvas" width="900" height="600"></canvas>
</div>

<script>
  const canvas = document.getElementById('canvas');
  const ctx = canvas.getContext('2d');

  let x, y;

  function drawCircle() {
    ctx.beginPath();
    ctx.arc((canvas.width / 2), (canvas.height / 2), 100, 0, 2 * Math.PI);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo((canvas.width / 2) - 100, (canvas.height / 2));
    ctx.lineTo((canvas.width / 2) + 100, (canvas.height / 2));
    ctx.closePath();
    ctx.stroke();
  }

  function draw() {
    drawCircle();
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(canvas.width / 2, canvas.height / 2);
    ctx.closePath();
    ctx.stroke();
  }

  function update(e) {
    x = e.offsetX;
    y = e.offsetY;

    let log = getAngle();
    console.log(log)
  }

  function init() {
    requestAnimationFrame(loop);
  }

  function loop() {
    clearCanvas();
    draw();
    requestAnimationFrame(loop);
  }

  function clearCanvas() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }

  function handleMouseMove(e) {
    update(e);
  }

  function getAngle() {
    let x1 = x;
    let y1 = y;

    let x2 = canvas.width / 2;
    let y2 = canvas.height / 2;

    let deltaX = x1 - x2;
    let deltaY = y1 - y2;

    let rad = Math.atan(deltaY, deltaX);
    console.log(rad)

    let deg = rad * (180 / Math.PI);

    return deg
  }

  document.addEventListener('mousemove', handleMouseMove);

  init();
</script>
-->