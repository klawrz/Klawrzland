<style>
.wrapper {
  display: flex;
  justify-content: center;
}

  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    background: white;
    border: 3px dashed black;
    width: 100%;
    height: 100%;
  }

  .knob {
    width: 200px;
    height: 200px;
    border-radius: 100px;
    background: green;
  }

  .knob:after {
    content: '';
    display: flex;
    background-color: black;
    width: 10px;
    height: 10px;
    border-radius: 100px;
    margin: 0 auto;
  }

  /* LCD Display Container */
.lcd-display {
  width: 200px; /* Adjust the width and height as needed */
  height: 100px;
  background-color: black;
  border: 2px solid silver;
  border-radius: 10px;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: "Courier New", monospace;
}

/* LCD Screen */
.lcd-screen {
  display: flex;
  flex-wrap: wrap;
  gap: 2px; /* Adjust the gap between segments as needed */
}

/* LCD Segment (A Basic Rectangle) */
.lcd-segment {
  width: 30px; /* Adjust the segment size as needed */
  height: 10px;
  background-color: lightgray;
  border: 1px solid gray;
}

/* Add styles for different segments to create characters or numbers */
.lcd-segment.on {
  background-color: green;
  box-shadow: 0 0 5px 2px green; /* Add a glow effect to the "on" segments */
}

/* Example: Create a "0" character using segments */
.lcd-screen .segment-a { /* Define a class for each segment */
  /* Add specific positioning for this segment to create the character "0" */
}

/* Add styles for other characters and numbers as needed */

</style>

<div class="wrapper">
  <div class="container">

  </div>
</div>

<div class="lcd-display">
  <div class="lcd-screen">
    <div class="lcd-segment"></div>
    <div class="lcd-segment"></div>
    <div class="lcd-segment"></div>
    <!-- Add more segments as needed -->
  </div>
</div>

<script>
  // Inspo: https://codepen.io/hienlm/pen/BaojoBj

  // Handle negative integer modulo operations
  Number.prototype.mod = function(n) {
    return ((this % n) + n) % n;
  }

  // Knobs array
  const knobs = [];

  // Knob class
  class Knob {
    static #lastID = 0;
    id;

    constructor() {
      // Variables
      this.id = ++Knob.#lastID;
      this.element = null;
      this.active = false;
      this.startAngle = 0;
      this.angle = 0;
      this.rotation = 0;

      // Methods
      this.create();
    }
    
    create() {
      // Create the element and assign class + ID
      this.element = document.createElement('div');
      this.element.classList.add('knob');
      this.element.id = `knob-${this.id}`;
      document.querySelector('.container').appendChild(this.element);
      
      // Add event listeners
      this.element.addEventListener('mousedown', this.handleMouseDown.bind(this));
      
      // Add class instance to knobs array
      knobs.push(this);
    }


    handleMouseDown(e) {
      e.preventDefault();

      // Get bound event handler functions
      this.boundMouseMove = this.handleMouseMove.bind(this);
      this.boundMouseUp = this.handleMouseUp.bind(this);

      // Add event listeners to handle mouse movement and mouse up
      document.addEventListener('mousemove', this.boundMouseMove);
      document.addEventListener('mouseup', this.boundMouseUp);
      
      // Get bounding box
      let box = this.element.getBoundingClientRect();

      // Get box center
      this.boxCenter = {
        x: box.left + (box.width / 2),
        y: box.top + (box.height / 2)
      }

      // Get deltas
      let dx = e.clientX - this.boxCenter.x,
          dy = e.clientY - this.boxCenter.y;

      // Get starting angle
      this.startAngle = Math.atan2(dy, dx) * (180 / Math.PI);
      
      // Set active
      this.active = true;
    }

    handleMouseMove(e) {
      e.preventDefault();
      if (this.active === true) this.rotate(e);
    }

    handleMouseUp(e) {
      e.preventDefault();

      // Stop rotating
      this.stop(e);

      // Remove the event listeners
      document.removeEventListener('mousemove', this.boundMouseMove);
      document.removeEventListener('mouseup', this.boundMouseUp);
    }

    rotate(e) {
      e.preventDefault();

      // Get deltas
      let dx = e.clientX - this.boxCenter.x,
          dy = e.clientY - this.boxCenter.y;
      
      // Get degrees
      let deg = Math.atan2(dy, dx) * (180 / Math.PI),
          deg360 = Math.floor(this.angle + this.rotation).mod(360);
      
      // Get rotation amount
      this.rotation = deg - this.startAngle;
      
      //console.log(`deg360: ${deg360}`)

      console.log(Math.floor((this.angle + this.rotation).mod(360)));

      // Return knob transform css
      return this.element.style.transform = `rotate(${deg360}deg)`;
    }

    stop(e) {
      e.preventDefault();

      this.angle += this.rotation;
      this.active = false;
    }

  }

  function init() {
    const knob = new Knob();
    const knob2 = new Knob();
    const knob3 = new Knob();
  }

  init();

</script>